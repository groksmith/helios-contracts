{
  "address": "0x547A67c350ad4EdD4273b6292E722A80baf37353",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_globals",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "poolId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactoryAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "PoolFactoryAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poolId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "liquidityAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "llFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "investmentPoolSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minInvestmentAmount",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globals",
      "outputs": [
        {
          "internalType": "contract IHeliosGlobals",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolFactoryAdmins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGlobals",
          "type": "address"
        }
      ],
      "name": "setGlobals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactoryAdmin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setPoolFactoryAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfba515b083902de59108b6a2ca51e7b93412e847e3a315e4b9c1817f2b8915e",
  "receipt": {
    "to": null,
    "from": "0xBd76699b877DDaA78B5056Aa90759219Ee50e967",
    "contractAddress": "0x547A67c350ad4EdD4273b6292E722A80baf37353",
    "transactionIndex": 0,
    "gasUsed": "3313567",
    "logsBloom": "0x
    "blockHash": "0x89eedc48dbefeeec5ce6253de5472a5ac18d22cdb5a0a725d732e245e0311af1",
    "transactionHash": "0xcfba515b083902de59108b6a2ca51e7b93412e847e3a315e4b9c1817f2b8915e",
    "logs": [],
    "blockNumber": 17410242,
    "cumulativeGasUsed": "3313567",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5Cad1ffe2bd441E42A7293bC98b3bCaEf367FaC9"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a416a0a2636aa74fa380c12754d55b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_globals\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactoryAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"PoolFactoryAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poolId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"llFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInvestmentAmount\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"contract IHeliosGlobals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFactoryAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGlobals\",\"type\":\"address\"}],\"name\":\"setGlobals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactoryAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setPoolFactoryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/interfaces/IHeliosGlobals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IHeliosGlobals {\\n    function globalAdmin() external view returns (address);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function governor() external view returns (address);\\n\\n    function isValidPoolDelegate(address delegate) external view returns (bool);\\n\\n    function isValidPoolFactory(address poolFactory) external view returns (bool);\\n\\n    function isValidLiquidityAsset(address asset) external view returns (bool);\\n\\n    function validSubFactories(address superFactory, address subFactory) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x624f8763317d15efa8113b760745c5ae02a74ebadab1863e4a639b737de34f42\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface ILiquidityLocker {\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3ba069030ba1b08cb1df65696a3121942678d7bf27b78e91127e4ad5b53ebac8\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ISubFactory.sol\\\";\\n\\ninterface ILiquidityLockerFactory is ISubFactory {\\n    function newLocker(address liquidityAsset) external returns (address liquidityLocker);\\n}\\n\",\"keccak256\":\"0xeb728ca7a6fef8487a32c59fcf689a7627432cf30c78ec3397eeb787e50e7ea1\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IHeliosGlobals.sol\\\";\\n\\ninterface IPoolFactory {\\n    function globals() external view returns (IHeliosGlobals);\\n}\\n\",\"keccak256\":\"0xd86e72aaee44202cf17873b72b3943211131c05688f9571c0099f1726bfa70a2\",\"license\":\"MIT\"},\"contracts/interfaces/ISubFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface ISubFactory {\\n    function factoryType() external pure returns (uint8);\\n}\",\"keccak256\":\"0xbcb38d91a1242bb194f78e158e1bf86f7ee41c40715e2a214ca074d5fb053b50\",\"license\":\"MIT\"},\"contracts/library/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// PoolLib is a library of utility functions used by Pool.\\nlibrary PoolLib {\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"Helios TKN Pool\\\";\\n    string public constant SYMBOL = \\\"HLS-P\\\";\\n\\n    event DepositDateUpdated(address indexed liquidityProvider, uint256 depositDate);\\n\\n    // Updates the effective deposit date based on how much new capital has been added.\\n    // If more capital is added, the deposit date moves closer to the current timestamp.\\n    function updateDepositDate(mapping(address => uint256) storage depositDate, uint256 balance, uint256 amount, address account) internal {\\n        uint256 prevDate = depositDate[account];\\n\\n        uint256 newDate = (balance + amount) > 0\\n        ? prevDate.add(block.timestamp.sub(prevDate).mul(amount).div(balance + amount))\\n        : prevDate;\\n\\n        depositDate[account] = newDate;\\n        emit DepositDateUpdated(account, newDate);\\n    }\\n}\\n\",\"keccak256\":\"0x8b416e3cd0f8193205aa92d589b92298c646000a8644ca50ddd1da14bf65c6ca\",\"license\":\"MIT\"},\"contracts/math/SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary SafeMathInt {\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"SMI:NEG\\\");\\n        return uint256(a);\\n    }\\n}\",\"keccak256\":\"0x7b76a7a5c672cfbc213a36a30bb00b8acca0af6763e1d5e7422bebe2076ac1bb\",\"license\":\"MIT\"},\"contracts/math/SafeMathUint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256 b) {\\n        b = int256(a);\\n        require(b >= 0, \\\"SMU:OOB\\\");\\n    }\\n}\",\"keccak256\":\"0x4b0b2041e9bd8f5abc5029ec7175baaf88dc6acab936f144701cf69084a5d210\",\"license\":\"MIT\"},\"contracts/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../interfaces/ILiquidityLockerFactory.sol\\\";\\nimport \\\"../interfaces/ILiquidityLocker.sol\\\";\\nimport \\\"../interfaces/IHeliosGlobals.sol\\\";\\nimport \\\"../library/PoolLib.sol\\\";\\nimport \\\"../token/PoolFDT.sol\\\";\\n\\n// Pool maintains all accounting and functionality related to Pools\\ncontract Pool is PoolFDT {\\n    using SafeMath  for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable superFactory;              // The factory that deployed this Pool\\n    address public immutable liquidityLocker;           // The LiquidityLocker owned by this contract\\n    address public immutable poolDelegate;              // The Pool Delegate address, maintains full authority over the Pool\\n    IERC20  public immutable liquidityAsset;            // The asset deposited by Lenders into the LiquidityLocker\\n    uint256 private immutable liquidityAssetDecimals;   // The precision for the Liquidity Asset (i.e. `decimals()`)\\n\\n    uint256 public principalOut;                        // The sum of all outstanding principal on Loans.\\n    address public borrower;                            // Address of borrower for this Pool.\\n\\n    struct PoolInfo {\\n        uint256 lockupPeriod;\\n        uint256 apy;\\n        uint256 duration;\\n        uint256 investmentPoolSize;\\n        uint256 minInvestmentAmount;\\n    }\\n\\n    PoolInfo public poolInfo;\\n\\n    enum State {Initialized, Finalized, Deactivated}\\n    State public poolState;\\n\\n    event PoolStateChanged(State state);\\n    event PoolAdminSet(address indexed poolAdmin, bool allowed);\\n    event BorrowerSet(address indexed borrower);\\n    event BalanceUpdated(address indexed liquidityProvider, address indexed token, uint256 balance);\\n    event CoolDown(address indexed liquidityProvider, uint256 cooldown);\\n    event Drawdown(address indexed borrower, uint256 amount, uint256 principalOut);\\n    event Payment(address indexed borrower, uint256 amount, uint256 principalOut);\\n\\n    mapping(address => bool)    public poolAdmins;  // The Pool Admin addresses that have permission to do certain operations in case of disaster management\\n    mapping(address => uint256) public depositDate; // Used for deposit/withdraw logic\\n\\n    constructor(\\n        address _poolDelegate,\\n        address _liquidityAsset,\\n        address _llFactory,\\n        uint256 _lockupPeriod,\\n        uint256 _apy,\\n        uint256 _duration,\\n        uint256 _investmentPoolSize,\\n        uint256 _minInvestmentAmount\\n    ) PoolFDT(PoolLib.NAME, PoolLib.SYMBOL){\\n        require(_liquidityAsset != address(0), \\\"P:ZERO_LIQ_ASSET\\\");\\n        require(_poolDelegate != address(0), \\\"P:ZERO_POOL_DLG\\\");\\n        require(_llFactory != address(0), \\\"P:ZERO_LIQ_LOCKER_FACTORY\\\");\\n\\n        liquidityAsset = IERC20(_liquidityAsset);\\n        liquidityAssetDecimals = ERC20(_liquidityAsset).decimals();\\n\\n        superFactory = msg.sender;\\n        poolDelegate = _poolDelegate;\\n\\n        poolInfo = PoolInfo(\\n            _lockupPeriod,\\n            _apy,\\n            _duration,\\n            _investmentPoolSize,\\n            _minInvestmentAmount\\n        );\\n\\n        poolState = State.Initialized;\\n\\n        require(_globals(superFactory).isValidLiquidityAsset(_liquidityAsset), \\\"P:INVALID_LIQ_ASSET\\\");\\n\\n        liquidityLocker = address(ILiquidityLockerFactory(_llFactory).newLocker(_liquidityAsset));\\n\\n        emit PoolStateChanged(poolState);\\n    }\\n\\n    // Finalizes the Pool, enabling deposits. Only the Pool Delegate can call this function\\n    function finalize() external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        _isValidState(State.Initialized);\\n        poolState = State.Finalized;\\n        emit PoolStateChanged(poolState);\\n    }\\n\\n    // Triggers deactivation, permanently shutting down the Pool. Only the Pool Delegate can call this function\\n    function deactivate() external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        _isValidState(State.Finalized);\\n        poolState = State.Deactivated;\\n        emit PoolStateChanged(poolState);\\n    }\\n\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount >= poolInfo.minInvestmentAmount, \\\"P:DEP_AMT_BELOW_MIN\\\");\\n        require(totalMinted + amount <= poolInfo.investmentPoolSize, \\\"P:DEP_AMT_EXCEEDS_POOL_SIZE\\\");\\n\\n        _whenProtocolNotPaused();\\n        _isValidState(State.Finalized);\\n\\n        PoolLib.updateDepositDate(depositDate, balanceOf(msg.sender), amount, msg.sender);\\n        liquidityAsset.safeTransferFrom(msg.sender, liquidityLocker, amount);\\n\\n        _mint(msg.sender, amount);\\n\\n        _emitBalanceUpdatedEvent();\\n        emit CoolDown(msg.sender, amount);\\n    }\\n\\n    function canWithdraw(uint256 amount) external view returns (bool) {\\n        _canWithdraw(msg.sender, amount);\\n        return true;\\n    }\\n\\n    function totalDeposited() external view returns (uint256) {\\n        return totalMinted;\\n    }\\n\\n    function withdraw(uint256 amount) external nonReentrant {\\n        _whenProtocolNotPaused();\\n        _canWithdraw(msg.sender, amount);\\n\\n        // Burn the corresponding PoolFDTs balance.\\n        _burn(msg.sender, amount);\\n\\n        // Transfer full entitled interest, decrement `interestSum`.\\n        // We'll turn off auto distribution funds\\n        // withdrawFunds();\\n\\n        _transferLiquidityLockerFunds(msg.sender, amount);\\n\\n        _emitBalanceUpdatedEvent();\\n    }\\n\\n    function drawdownAmount() external view returns (uint256) {\\n        return _drawdownAmount();\\n    }\\n\\n    function drawdown(uint256 amount) external isBorrower nonReentrant {\\n        require(amount > 0, \\\"P:INVALID_AMOUNT\\\");\\n        require(amount <= _drawdownAmount(), \\\"P:INSUFFICIENT_TOTAL_SUPPLY\\\");\\n\\n        principalOut = principalOut.add(amount);\\n\\n        _transferLiquidityLockerFunds(msg.sender, amount);\\n        emit Drawdown(msg.sender, amount, principalOut);\\n    }\\n\\n    function makePayment(uint256 principalClaim) external isBorrower nonReentrant {\\n        uint256 interestClaim = 0;\\n\\n        if (principalClaim <= principalOut) {\\n            principalOut = principalOut - principalClaim;\\n        } else {\\n            // Distribute `principalClaim` overflow as interest to LPs.\\n            interestClaim = principalClaim - principalOut;\\n\\n            // Set `principalClaim` to `principalOut` so correct amount gets transferred.\\n            principalClaim = principalOut;\\n\\n            // Set `principalOut` to zero to avoid subtraction overflow.\\n            principalOut = 0;\\n        }\\n\\n        interestSum = interestSum.add(interestClaim);\\n\\n        _transferLiquidityAssetFrom(msg.sender, liquidityLocker, principalClaim.add(interestClaim));\\n        updateFundsReceived();\\n\\n        emit Payment(msg.sender, principalClaim, interestSum);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return uint8(liquidityAssetDecimals);\\n    }\\n\\n    function withdrawFunds() public override {\\n        _whenProtocolNotPaused();\\n        uint256 withdrawableFunds = _prepareWithdraw();\\n\\n        if (withdrawableFunds == uint256(0)) return;\\n\\n        _transferLiquidityLockerFunds(msg.sender, withdrawableFunds);\\n        _emitBalanceUpdatedEvent();\\n\\n        interestSum = interestSum.sub(withdrawableFunds);\\n\\n        _updateFundsTokenBalance();\\n    }\\n\\n    function withdrawFundsAmount(uint256 amount) public override {\\n        _whenProtocolNotPaused();\\n        uint256 withdrawableFunds = _prepareWithdraw();\\n        require(amount <= withdrawableFunds, \\\"P:INSUFFICIENT_WITHDRAWABLE_FUNDS\\\");\\n\\n        if (withdrawableFunds == uint256(0)) return;\\n\\n        _transferLiquidityLockerFunds(msg.sender, amount);\\n        _emitBalanceUpdatedEvent();\\n\\n        interestSum = interestSum.sub(amount);\\n\\n        _updateFundsTokenBalance();\\n    }\\n\\n    // Sets a Pool Admin. Only the Pool Delegate can call this function\\n    function setPoolAdmin(address poolAdmin, bool allowed) external {\\n        _isValidDelegateAndProtocolNotPaused();\\n        poolAdmins[poolAdmin] = allowed;\\n        emit PoolAdminSet(poolAdmin, allowed);\\n    }\\n\\n    // Sets a Borrower. Only the Pool Delegate can call this function\\n    function setBorrower(address _borrower) external {\\n        require(_borrower != address(0), \\\"P:ZERO_BORROWER\\\");\\n\\n        _isValidDelegateAndProtocolNotPaused();\\n        borrower = _borrower;\\n        emit BorrowerSet(borrower);\\n    }\\n\\n    function _canWithdraw(address account, uint256 amount) internal view {\\n        require(depositDate[account].add(poolInfo.lockupPeriod) <= block.timestamp, \\\"P:FUNDS_LOCKED\\\");\\n        require(balanceOf(account) >= amount, \\\"P:INSUFFICIENT_BALANCE\\\");\\n        require(amount <= _balanceOfLiquidityLocker(), \\\"P:INSUFFICIENT_LIQUIDITY\\\");\\n    }\\n\\n    // Get drawdown available amount\\n    function _drawdownAmount() internal view returns (uint256) {\\n        return totalSupply() - principalOut;\\n    }\\n\\n    // Get LiquidityLocker balance\\n    function _balanceOfLiquidityLocker() internal view returns (uint256) {\\n        return liquidityAsset.balanceOf(liquidityLocker);\\n    }\\n\\n    // Checks that the current state of Pool matches the provided state\\n    function _isValidState(State _state) internal view {\\n        require(poolState == _state, \\\"P:BAD_STATE\\\");\\n    }\\n\\n    // Emits a `BalanceUpdated` event for LiquidityLocker\\n    function _emitBalanceUpdatedEvent() internal {\\n        emit BalanceUpdated(liquidityLocker, address(liquidityAsset), _balanceOfLiquidityLocker());\\n    }\\n\\n    // Checks that the protocol is not in a paused state\\n    function _whenProtocolNotPaused() internal view {\\n        require(!_globals(superFactory).protocolPaused(), \\\"P:PROTO_PAUSED\\\");\\n    }\\n\\n    // Checks that `msg.sender` is the Pool Delegate and not paused\\n    function _isValidDelegateAndProtocolNotPaused() internal view {\\n        require(msg.sender == poolDelegate, \\\"P:NOT_DEL\\\");\\n        _whenProtocolNotPaused();\\n    }\\n\\n    // Transfers Liquidity Asset to given `to` address\\n    function _transferLiquidityAssetFrom(address from, address to, uint256 value) internal {\\n        liquidityAsset.safeTransferFrom(from, to, value);\\n    }\\n\\n    // Transfers Liquidity Locker assets to given `to` address\\n    function _transferLiquidityLockerFunds(address to, uint256 value) internal returns (bool){\\n        return _liquidityLocker().transfer(to, value);\\n    }\\n\\n    // Returns the LiquidityLocker instance\\n    function _liquidityLocker() internal view returns (ILiquidityLocker) {\\n        return ILiquidityLocker(liquidityLocker);\\n    }\\n\\n    // Returns the HeliosGlobals instance\\n    function _globals(address poolFactory) internal view returns (IHeliosGlobals) {\\n        return IHeliosGlobals(IPoolFactory(poolFactory).globals());\\n    }\\n\\n    // Checks that `msg.sender` is the Borrower\\n    modifier isBorrower() {\\n        require(msg.sender == borrower, \\\"P:NOT_BORROWER\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x98328ce927dbd947ab2e6aa1c7780309e7432028a1304a16d22f7b882674675f\",\"license\":\"MIT\"},\"contracts/pool/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"../interfaces/IHeliosGlobals.sol\\\";\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\n\\n// PoolFactory instantiates Pools\\ncontract PoolFactory is IPoolFactory, Pausable, ReentrancyGuard {\\n    IHeliosGlobals public override globals;                 // A HeliosGlobals instance\\n\\n    mapping(string => address)  public pools;               // Map to reference Pools corresponding to their respective indices.\\n    mapping(address => bool)    public isPool;              // True only if a Pool was instantiated by this factory.\\n    mapping(address => bool)    public poolFactoryAdmins;   // The PoolFactory Admin addresses that have permission to do certain operations in case of disaster management.\\n\\n    event PoolFactoryAdminSet(address indexed poolFactoryAdmin, bool allowed);\\n\\n    event PoolCreated(string poolId, address liquidityAsset, address indexed pool, address indexed delegate);\\n\\n    constructor(address _globals) {\\n        globals = IHeliosGlobals(_globals);\\n    }\\n\\n    // Sets HeliosGlobals instance. Only the Governor can call this function\\n    function setGlobals(address newGlobals) external {\\n        _isValidGovernor();\\n        require(newGlobals != address(0), \\\"PF:ZERO_NEW_GLOBALS\\\");\\n        globals = IHeliosGlobals(newGlobals);\\n    }\\n\\n    // Instantiates a Pool\\n    function createPool(\\n        string calldata poolId,\\n        address liquidityAsset,\\n        address llFactory,\\n        uint256 lockupPeriod,\\n        uint256 apy,\\n        uint256 duration,\\n        uint256 investmentPoolSize,\\n        uint256 minInvestmentAmount\\n    ) external whenNotPaused nonReentrant returns (address poolAddress) {\\n\\n        _whenProtocolNotPaused();\\n\\n        IHeliosGlobals _globals = globals;\\n        require(_globals.isValidPoolDelegate(msg.sender), \\\"PF:NOT_DELEGATE\\\");\\n\\n        _isMappingKeyValid(poolId);\\n\\n        Pool pool = new Pool(\\n            msg.sender,\\n            liquidityAsset,\\n            llFactory,\\n            lockupPeriod,\\n            apy,\\n            duration,\\n            investmentPoolSize,\\n            minInvestmentAmount\\n        );\\n\\n        poolAddress = address(pool);\\n        pools[poolId] = poolAddress;\\n        isPool[poolAddress] = true;\\n\\n        emit PoolCreated(poolId, liquidityAsset, poolAddress, msg.sender);\\n    }\\n\\n    // Sets a PoolFactory Admin. Only the Governor can call this function\\n    function setPoolFactoryAdmin(address poolFactoryAdmin, bool allowed) external {\\n        _isValidGovernor();\\n        poolFactoryAdmins[poolFactoryAdmin] = allowed;\\n        emit PoolFactoryAdminSet(poolFactoryAdmin, allowed);\\n    }\\n\\n    // Triggers paused state. Halts functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function\\n    function pause() external {\\n        _isValidGovernorOrPoolFactoryAdmin();\\n        super._pause();\\n    }\\n\\n    // Triggers unpaused state. Restores functionality for certain functions. Only the Governor or a PoolFactory Admin can call this function\\n    function unpause() external {\\n        _isValidGovernorOrPoolFactoryAdmin();\\n        super._unpause();\\n    }\\n\\n    // Checks that `msg.sender` is the Governor\\n    function _isValidGovernor() internal view {\\n        require(msg.sender == globals.governor(), \\\"PF:NOT_GOV\\\");\\n    }\\n\\n    // Checks that `msg.sender` is the Governor or a PoolFactory Admin\\n    function _isValidGovernorOrPoolFactoryAdmin() internal view {\\n        require(msg.sender == globals.governor() || poolFactoryAdmins[msg.sender], \\\"PF:NOT_GOV_OR_ADM\\\");\\n    }\\n\\n    // Checks that the protocol is not in a paused state\\n    function _whenProtocolNotPaused() internal view {\\n        require(!globals.protocolPaused(), \\\"PF:PROTO_PAUSED\\\");\\n    }\\n\\n    // Checks that the mapping key is valid (unique)\\n    function _isMappingKeyValid(string calldata key) internal view {\\n        require(pools[key] == address(0), \\\"PF:POOL_ID_ALREADY_EXISTS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe5d1434b30adfe5e2fd21e558a32c78e806c7e3baf90dee15bc64d28dafe8043\",\"license\":\"MIT\"},\"contracts/token/BasicFDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../math/SafeMathUint.sol\\\";\\nimport \\\"../math/SafeMathInt.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BasicFDT is ERC20, ReentrancyGuard {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SafeMathInt    for int256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 internal constant POINTS_MULTIPLIER = 1e18;\\n    uint256 internal pointsPerShare;\\n    uint256 internal totalMinted;\\n\\n    mapping(address => int256)  internal pointsCorrection;\\n    mapping(address => uint256) internal withdrawnFunds;\\n\\n    event PointsPerShareUpdated(uint256 pointsPerShare);\\n    event PointsCorrectionUpdated(address indexed account, int256 pointsCorrection);\\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) ERC20(tokenName, tokenSymbol) {}\\n\\n    function _distributeFunds(uint256 value) internal {\\n        require(totalSupply() > 0, \\\"FDT:ZERO_SUPPLY\\\");\\n\\n        if (value == 0) return;\\n\\n        pointsPerShare = pointsPerShare.add(value.mul(POINTS_MULTIPLIER) / totalSupply());\\n        emit FundsDistributed(msg.sender, value);\\n        emit PointsPerShareUpdated(pointsPerShare);\\n    }\\n\\n    function _prepareWithdraw() internal returns (uint256 withdrawableDividend) {\\n        withdrawableDividend = withdrawableFundsOf(msg.sender);\\n        uint256 _withdrawnFunds = withdrawnFunds[msg.sender].add(withdrawableDividend);\\n        withdrawnFunds[msg.sender] = _withdrawnFunds;\\n\\n        emit FundsWithdrawn(msg.sender, withdrawableDividend, _withdrawnFunds);\\n    }\\n\\n    function withdrawableFundsOf(address owner) public view returns (uint256) {\\n        return accumulativeFundsOf(owner).sub(withdrawnFunds[owner]);\\n    }\\n\\n    function withdrawnFundsOf(address owner) external view returns (uint256) {\\n        return withdrawnFunds[owner];\\n    }\\n\\n    function accumulativeFundsOf(address owner) public view returns (uint256) {\\n        return pointsPerShare\\n            .mul(balanceOf(owner))\\n            .toInt256Safe()\\n            .add(pointsCorrection[owner])\\n            .toUint256Safe() / POINTS_MULTIPLIER;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function _transfer(address from, address to, uint256 value) internal virtual override {\\n        super._transfer(from, to, value);\\n\\n        int256 _magCorrection = pointsPerShare.mul(value).toInt256Safe();\\n        int256 pointsCorrectionFrom = pointsCorrection[from].add(_magCorrection);\\n        pointsCorrection[from] = pointsCorrectionFrom;\\n        int256 pointsCorrectionTo = pointsCorrection[to].sub(_magCorrection);\\n        pointsCorrection[to] = pointsCorrectionTo;\\n\\n        emit PointsCorrectionUpdated(from, pointsCorrectionFrom);\\n        emit PointsCorrectionUpdated(to, pointsCorrectionTo);\\n    }\\n\\n    function _mint(address account, uint256 value) internal virtual override {\\n        super._mint(account, value);\\n\\n        totalMinted = totalMinted.add(value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].sub(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    function _burn(address account, uint256 value) internal virtual override {\\n        super._burn(account, value);\\n\\n        int256 _pointsCorrection = pointsCorrection[account].add(\\n            (pointsPerShare.mul(value)).toInt256Safe()\\n        );\\n\\n        pointsCorrection[account] = _pointsCorrection;\\n\\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\\n    }\\n\\n    function withdrawFunds() public virtual {}\\n\\n    function withdrawFundsAmount(uint256 amount) public virtual {}\\n\\n    function _updateFundsTokenBalance() internal virtual returns (int256);\\n\\n    function updateFundsReceived() public virtual {\\n        int256 newFunds = _updateFundsTokenBalance();\\n\\n        if (newFunds <= 0) return;\\n\\n        _distributeFunds(newFunds.toUint256Safe());\\n    }\\n}\",\"keccak256\":\"0x67692bd724e51602c830bb85a979ef8c3b40bcd66f990f5f7cae04c162440de5\",\"license\":\"MIT\"},\"contracts/token/PoolFDT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./BasicFDT.sol\\\";\\n\\nabstract contract PoolFDT is BasicFDT {\\n    using SafeMath       for uint256;\\n    using SafeMathUint   for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeMathInt    for int256;\\n\\n    uint256 public interestSum;     // Sum of all withdrawable interest.\\n    uint256 public interestBalance; // The amount of earned interest present and accounted for in this contract.\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) BasicFDT(tokenName, tokenSymbol) {}\\n\\n    function _updateFundsTokenBalance() internal override returns (int256) {\\n        uint256 _prevFundsTokenBalance = interestBalance;\\n        interestBalance = interestSum;\\n        return int256(interestBalance).sub(int256(_prevFundsTokenBalance));\\n    }\\n}\",\"keccak256\":\"0x940e24636adc171d7e5ec234e1795c1205348f31f28ed986d92c88a005797e61\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613af3380380613af383398101604081905261002f91610062565b6000805460ff1916905560018055600280546001600160a01b0319166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b613a52806100a16000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80639d6f17a8116200006e5780639d6f17a81462000133578063c31245251462000183578063cc2e0a261462000197578063dd7d699914620001ae578063f3f616c014620001c557600080fd5b80633f4ba83a14620000b05780635b16ebb714620000bc5780635c975abb14620000f75780636050abb214620001035780638456cb591462000129575b600080fd5b620000ba620001dc565b005b620000e2620000cd36600462000a00565b60046020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b60005460ff16620000e2565b620000e26200011436600462000a00565b60056020526000908152604090205460ff1681565b620000ba620001f2565b6200016a6200014436600462000a3d565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001620000ee565b6002546200016a906001600160a01b031681565b620000ba620001a836600462000a00565b62000206565b6200016a620001bf36600462000af8565b62000291565b620000ba620001d636600462000bcf565b620004d9565b620001e662000542565b620001f06200062d565b565b620001fc62000542565b620001f062000681565b62000210620006c1565b6001600160a01b038116620002625760405162461bcd60e51b815260206004820152601360248201527250463a5a45524f5f4e45575f474c4f42414c5360681b60448201526064015b60405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006200029d6200078a565b620002a7620007d2565b620002b16200082d565b600254604051631b971aa360e11b81523360048201526001600160a01b0390911690819063372e354690602401602060405180830381865afa158015620002fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000322919062000c0d565b620003625760405162461bcd60e51b815260206004820152600f60248201526e50463a4e4f545f44454c454741544560881b604482015260640162000259565b6200036e8b8b620008e8565b6000338a8a8a8a8a8a8a6040516200038690620009c7565b6001600160a01b03988916815296881660208801529690941660408601526060850192909252608084015260a083015260c082015260e081019190915261010001604051809103906000f080158015620003e4573d6000803e3d6000fd5b5090508092508260038d8d604051620003ff92919062000c2d565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160046000856001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550336001600160a01b0316836001600160a01b03167fcf2a5a138ba5b498559fc2ecefc1acc601b97f9c65726e53ce8543d03a3a2d698e8e8e604051620004b89392919062000c3d565b60405180910390a35050620004cc60018055565b9998505050505050505050565b620004e3620006c1565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fc0d8ae32722eafe08b35b2bb46dec31dcbbd5bb18069f66995df3c9f47f4d64f910160405180910390a25050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000596573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005bc919062000c7f565b6001600160a01b0316336001600160a01b03161480620005eb57503360009081526005602052604090205460ff165b620001f05760405162461bcd60e51b815260206004820152601160248201527050463a4e4f545f474f565f4f525f41444d60781b604482015260640162000259565b6200063762000973565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6200068b6200078a565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620006643390565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200073b919062000c7f565b6001600160a01b0316336001600160a01b031614620001f05760405162461bcd60e51b815260206004820152600a60248201526928231d2727aa2fa3a7ab60b11b604482015260640162000259565b60005460ff1615620001f05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000259565b600260015403620008265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000259565b6002600155565b600260009054906101000a90046001600160a01b03166001600160a01b031663425fad586040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000881573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a7919062000c0d565b15620001f05760405162461bcd60e51b815260206004820152600f60248201526e14118e941493d513d7d4105554d151608a1b604482015260640162000259565b60006001600160a01b0316600383836040516200090792919062000c2d565b908152604051908190036020019020546001600160a01b0316146200096f5760405162461bcd60e51b815260206004820152601960248201527f50463a504f4f4c5f49445f414c52454144595f45584953545300000000000000604482015260640162000259565b5050565b60005460ff16620001f05760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640162000259565b612d7d8062000ca083390190565b6001600160a01b0381168114620009eb57600080fd5b50565b8035620009fb81620009d5565b919050565b60006020828403121562000a1357600080fd5b813562000a2081620009d5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121562000a5057600080fd5b813567ffffffffffffffff8082111562000a6957600080fd5b818401915084601f83011262000a7e57600080fd5b81358181111562000a935762000a9362000a27565b604051601f8201601f19908116603f0116810190838211818310171562000abe5762000abe62000a27565b8160405282815287602084870101111562000ad857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060008060008060008060006101008a8c03121562000b1857600080fd5b893567ffffffffffffffff8082111562000b3157600080fd5b818c0191508c601f83011262000b4657600080fd5b81358181111562000b5657600080fd5b8d602082850101111562000b6957600080fd5b60209283019b50995062000b81918c019050620009ee565b965062000b9160408b01620009ee565b989b979a5095986060810135976080820135975060a0820135965060c0820135955060e0909101359350915050565b8015158114620009eb57600080fd5b6000806040838503121562000be357600080fd5b823562000bf081620009d5565b9150602083013562000c028162000bc0565b809150509250929050565b60006020828403121562000c2057600080fd5b815162000a208162000bc0565b8183823760009101908152919050565b604081528260408201528284606083013760006060848301015260006060601f19601f86011683010190506001600160a01b0383166020830152949350505050565b60006020828403121562000c9257600080fd5b815162000a2081620009d556fe6101206040523480156200001257600080fd5b5060405162002d7d38038062002d7d83398101604081905262000035916200048b565b6040518060400160405280600f81526020016e12195b1a5bdcc81512d388141bdbdb608a1b815250604051806040016040528060058152602001640484c532d560dc1b815250818181818160039081620000909190620005b4565b5060046200009f8282620005b4565b505060016005555050506001600160a01b0389169150620000fc90505760405162461bcd60e51b815260206004820152601060248201526f140e96915493d7d3125457d054d4d15560821b60448201526064015b60405180910390fd5b6001600160a01b038816620001465760405162461bcd60e51b815260206004820152600f60248201526e503a5a45524f5f504f4f4c5f444c4760881b6044820152606401620000f3565b6001600160a01b0386166200019e5760405162461bcd60e51b815260206004820152601960248201527f503a5a45524f5f4c49515f4c4f434b45525f464143544f5259000000000000006044820152606401620000f3565b6001600160a01b03871660e08190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015620001e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020f919062000680565b60ff16610100523360809081526001600160a01b03891660c0526040805160a08101825287815260208101879052908101859052606081018490528101829052600e869055600f8590556010849055601183905560128290556013805460ff19169055516200027e9062000405565b60405163434a88c560e11b81526001600160a01b0389811660048301529190911690638695118a90602401602060405180830381865afa158015620002c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ed9190620006ac565b6200033b5760405162461bcd60e51b815260206004820152601360248201527f503a494e56414c49445f4c49515f4153534554000000000000000000000000006044820152606401620000f3565b604051630cf5bc1d60e11b81526001600160a01b0388811660048301528716906319eb783a906024016020604051808303816000875af115801562000384573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003aa9190620006d0565b6001600160a01b031660a0526013546040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a91620003ef9160ff90911690620006f0565b60405180910390a1505050505050505062000719565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000446573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046c9190620006d0565b92915050565b6001600160a01b03811681146200048857600080fd5b50565b600080600080600080600080610100898b031215620004a957600080fd5b8851620004b68162000472565b60208a0151909850620004c98162000472565b60408a0151909750620004dc8162000472565b60608a015160808b015160a08c015160c08d015160e0909d01519b9e9a9d50929b919a9099929850909650945092505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200053a57607f821691505b6020821081036200055b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005af57600081815260208120601f850160051c810160208610156200058a5750805b601f850160051c820191505b81811015620005ab5782815560010162000596565b5050505b505050565b81516001600160401b03811115620005d057620005d06200050f565b620005e881620005e1845462000525565b8462000561565b602080601f831160018114620006205760008415620006075750858301515b600019600386901b1c1916600185901b178555620005ab565b600085815260208120601f198616915b82811015620006515788860151825594840194600190910190840162000630565b5085821015620006705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200069357600080fd5b815160ff81168114620006a557600080fd5b9392505050565b600060208284031215620006bf57600080fd5b81518015158114620006a557600080fd5b600060208284031215620006e357600080fd5b8151620006a58162000472565b60208101600383106200071357634e487b7160e01b600052602160045260246000fd5b91905290565b60805160a05160c05160e051610100516125d2620007ab600039600061038501526000818161030c01528181610d9501528181611449015281816119a80152611d990152600081816103c701526118710152600081816105260152818161098301528181610db8015281816113ac015281816114730152611d6e0152600081816102c5015261126501526125d26000f3fe608060405234801561001057600080fd5b50600436106102475760003560e01c8063613384f21161013b578063a079a4dd116100b8578063c762d5f71161007c578063c762d5f7146105a6578063d16987f9146105b9578063dd62ed3e146105cc578063fbe85f0614610605578063ff50abdc1461061857600080fd5b8063a079a4dd14610551578063a457c2d714610564578063a9059cbb14610577578063ac6416551461058a578063b6b55f251461059357600080fd5b80637df1f1b9116100ff5780637df1f1b9146104f35780639185192a1461050657806395d89b41146105195780639759164a146105215780639f3c73251461054857600080fd5b8063613384f21461047c578063641ad8a91461049f57806370a08231146104b957806371073bac146104e257806373e835ee146104eb57600080fd5b8063313ce567116101c95780634bb278f31161018d5780634bb278f3146104045780634e97415f1461040c5780635114cb521461041f57806351b42b00146104325780635a2f3d091461043a57600080fd5b8063313ce5671461037e57806339509351146103af5780634046af2b146103c2578063443bb293146103e957806346c162de146103fc57600080fd5b8063209b2bca11610210578063209b2bca1461030757806323b872dd1461032e57806324600fc31461034157806324b92e8e1461034b5780632e1a7d4d1461036b57600080fd5b806241c52c1461024c57806306fdde0314610288578063095ea7b31461029d5780630d49b38c146102c057806318160ddd146102ff575b600080fd5b61027561025a36600461227a565b6001600160a01b031660009081526009602052604090205490565b6040519081526020015b60405180910390f35b610290610620565b60405161027f91906122bb565b6102b06102ab3660046122ee565b6106b2565b604051901515815260200161027f565b6102e77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161027f565b600254610275565b6102e77f000000000000000000000000000000000000000000000000000000000000000081565b6102b061033c36600461231a565b6106cc565b6103496106f0565b005b61027561035936600461227a565b60156020526000908152604090205481565b61034961037936600461235b565b61073b565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161027f565b6102b06103bd3660046122ee565b61077f565b6102e77f000000000000000000000000000000000000000000000000000000000000000081565b6102756103f736600461227a565b6107be565b6103496107ea565b610349610812565b61027561041a36600461227a565b610879565b61034961042d36600461235b565b6108d9565b610349610a08565b600e54600f54601054601154601254610454949392919085565b604080519586526020860194909452928401919091526060830152608082015260a00161027f565b6102b061048a36600461227a565b60146020526000908152604090205460ff1681565b6013546104ac9060ff1681565b60405161027f919061238a565b6102756104c736600461227a565b6001600160a01b031660009081526020819052604090205490565b610275600a5481565b610275610a2e565b600d546102e7906001600160a01b031681565b6103496105143660046123c0565b610a3d565b610290610aa4565b6102e77f000000000000000000000000000000000000000000000000000000000000000081565b610275600b5481565b61034961055f36600461235b565b610ab3565b6102b06105723660046122ee565b610c09565b6102b06105853660046122ee565b610c9b565b610275600c5481565b6103496105a136600461235b565b610ca9565b6103496105b436600461227a565b610e21565b6103496105c736600461235b565b610ec8565b6102756105da3660046123f9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102b061061336600461235b565b610f6f565b600754610275565b60606003805461062f90612427565b80601f016020809104026020016040519081016040528092919081815260200182805461065b90612427565b80156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b5050505050905090565b6000336106c0818585610f83565b60019150505b92915050565b6000336106da8582856110a7565b6106e5858585611139565b506001949350505050565b6106f8611260565b600061070261132a565b90508061070c5750565b61071633826113a8565b5061071f611447565b600a5461072c90826114d7565b600a556107376114e3565b5050565b610743611501565b61074b611260565b610755338261155a565b61075f3382611686565b61076933826113a8565b50610772611447565b61077c6001600555565b50565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906106c090829086906107b9908790612477565b610f83565b6001600160a01b0381166000908152600960205260408120546106c6906107e484610879565b906114d7565b60006107f46114e3565b9050600081136108015750565b61077c61080d8261172a565b61176a565b61081a611866565b61082460006118d2565b601380546001919060ff191682805b02179055506013546040517f24b0afb747a8213aea796b9518bfa667de187b83390eda7cc93b8e57f80fcd1a9161086f9160ff9091169061238a565b60405180910390a1565b6001600160a01b03811660009081526008602090815260408083205491839052822054600654670de0b6b3a7640000926108cf926108ca926108c4916108bf9190611936565b611942565b90611983565b61172a565b6106c6919061248a565b600d546001600160a01b031633146109295760405162461bcd60e51b815260206004820152600e60248201526d281d2727aa2fa127a92927aba2a960911b60448201526064015b60405180910390fd5b610931611501565b6000600c5482116109525781600c5461094a91906124ac565b600c5561096d565b600c5461095f90836124ac565b600c80546000909155925090505b600a5461097a908261198f565b600a556109b1337f00000000000000000000000000000000000000000000000000000000000000006109ac858561198f565b61199b565b6109b96107ea565b600a5460405133917f9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93916109f591868252602082015260400190565b60405180910390a25061077c6001600555565b610a10611866565b610a1a60016118d2565b601380546002919060ff1916600183610833565b6000610a386119d0565b905090565b610a45611866565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f353578bbc0ab907b7018b0f7b50b5f822d31dc9fcf4c16fffa780e109ca7c930910160405180910390a25050565b60606004805461062f90612427565b600d546001600160a01b03163314610afe5760405162461bcd60e51b815260206004820152600e60248201526d281d2727aa2fa127a92927aba2a960911b6044820152606401610920565b610b06611501565b60008111610b495760405162461bcd60e51b815260206004820152601060248201526f140e9253959053125117d05353d5539560821b6044820152606401610920565b610b516119d0565b811115610ba05760405162461bcd60e51b815260206004820152601b60248201527f503a494e53554646494349454e545f544f54414c5f535550504c5900000000006044820152606401610920565b600c54610bad908261198f565b600c55610bba33826113a8565b50600c5460405133917feb82ce5153cfaaf31e19ab47dcbb1d8b7243fc661b67f650fef772e2fe396f4c91610bf791858252602082015260400190565b60405180910390a261077c6001600555565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610c8e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610920565b6106e58286868403610f83565b6000336106c0818585611139565b610cb1611501565b601254811015610cf95760405162461bcd60e51b8152602060048201526013602482015272281d2222a82fa0a6aa2fa122a627abafa6a4a760691b6044820152606401610920565b601154600754610d0a908390612477565b1115610d585760405162461bcd60e51b815260206004820152601b60248201527f503a4445505f414d545f455843454544535f504f4f4c5f53495a4500000000006044820152606401610920565b610d60611260565b610d6a60016118d2565b33600090815260208190526040902054610d889060159083336119e8565b610ddd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000084611a98565b610de73382611af2565b610def611447565b60405181815233907fc059ec2495d8c6ef830fa41e9f4c53520df8a3e2c1128af5493ebf22b2313e5f90602001610bf7565b6001600160a01b038116610e695760405162461bcd60e51b815260206004820152600f60248201526e281d2d22a927afa127a92927aba2a960891b6044820152606401610920565b610e71611866565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f47746d41e99a865bf52730f5e1401445396e9025e37301a8f7f720896ee3f30390600090a250565b610ed0611260565b6000610eda61132a565b905080821115610f365760405162461bcd60e51b815260206004820152602160248201527f503a494e53554646494349454e545f574954484452415741424c455f46554e446044820152605360f81b6064820152608401610920565b80610f3f575050565b610f4933836113a8565b50610f52611447565b600a54610f5f90836114d7565b600a55610f6a6114e3565b505050565b6000610f7b338361155a565b506001919050565b6001600160a01b038316610fe55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610920565b6001600160a01b0382166110465760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610920565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461113357818110156111265760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610920565b6111338484848403610f83565b50505050565b611144838383611b43565b600061115e6108bf8360065461193690919063ffffffff16565b6001600160a01b038516600090815260086020526040812054919250906111859083611983565b6001600160a01b03808716600090815260086020526040808220849055918716815290812054919250906111b99084611ce7565b6001600160a01b0380871660009081526008602052604090819020839055519192508716907ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa77739061120d9085815260200190565b60405180910390a2846001600160a01b03167ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa77738260405161125091815260200190565b60405180910390a2505050505050565b6112897f0000000000000000000000000000000000000000000000000000000000000000611cf3565b6001600160a01b031663425fad586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea91906124bf565b156113285760405162461bcd60e51b815260206004820152600e60248201526d140e941493d513d7d4105554d15160921b6044820152606401610920565b565b6000611335336107be565b3360009081526009602052604081205491925090611353908361198f565b33600081815260096020908152604091829020849055815186815290810184905292935090917ffbc3a599b784fe88772fc5abcc07223f64ca0b13acc341f4fb1e46bef0510eb4910160405180910390a25090565b60007f000000000000000000000000000000000000000000000000000000000000000060405163a9059cbb60e01b81526001600160a01b03858116600483015260248201859052919091169063a9059cbb906044016020604051808303816000875af115801561141c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144091906124bf565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a26114c4611d57565b60405190815260200160405180910390a3565b600061144082846124ac565b600b8054600a54918290556000916114fb9082611ce7565b91505090565b6002600554036115535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610920565b6002600555565b600e546001600160a01b0383166000908152601560205260409020544291611582919061198f565b11156115c15760405162461bcd60e51b815260206004820152600e60248201526d140e9195539114d7d313d0d2d15160921b6044820152606401610920565b806115e1836001600160a01b031660009081526020819052604090205490565b101561162f5760405162461bcd60e51b815260206004820152601660248201527f503a494e53554646494349454e545f42414c414e4345000000000000000000006044820152606401610920565b611637611d57565b8111156107375760405162461bcd60e51b815260206004820152601860248201527f503a494e53554646494349454e545f4c495155494449545900000000000000006044820152606401610920565b6116908282611e06565b60006116cc6116ad6108bf8460065461193690919063ffffffff16565b6001600160a01b03851660009081526008602052604090205490611983565b6001600160a01b0384166000818152600860205260409081902083905551919250907ff694bebd33ada288ae2f4485315db76739e2d5501daf315e71c9d8f841aa77739061171d9084815260200190565b60405180910390a2505050565b6000808212156117665760405162461bcd60e51b8152602060048201526007602482015266534d493a4e454760c81b6044820152606401610920565b5090565b600061177560025490565b116117b45760405162461bcd60e51b815260206004820152600f60248201526e4644543a5a45524f5f535550504c5960881b6044820152606401610920565b806000036117bf5750565b6117f06117cb60025490565b6117dd83670de0b6b3a7640000611936565b6117e7919061248a565b6006549061198f565b60065560405181815233907f26536799ace2c3dbe12e638ec3ade6b4173dcf1289be0a58d51a5003015649bd9060200160405180910390a27f1f8d7705f31c3337a080803a8ad7e71946fb88d84738879be2bf402f97156e9660065460405161185b91815260200190565b60405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118ca5760405162461bcd60e51b8152602060048201526009602482015268140e9393d517d1115360ba1b6044820152606401610920565b611328611260565b8060028111156118e4576118e4612374565b60135460ff1660028111156118fb576118fb612374565b1461077c5760405162461bcd60e51b815260206004820152600b60248201526a503a4241445f535441544560a81b6044820152606401610920565b600061144082846124dc565b80600081121561197e5760405162461bcd60e51b815260206004820152600760248201526629a6aa9d27a7a160c91b6044820152606401610920565b919050565b600061144082846124fb565b60006114408284612477565b610f6a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848484611a98565b6000600c546119de60025490565b610a3891906124ac565b6001600160a01b0381166000908152602085905260408120549080611a0d8587612477565b11611a185781611a49565b611a49611a42611a288688612477565b611a3c87611a3642886114d7565b90611936565b90611f38565b839061198f565b6001600160a01b03841660008181526020898152604091829020849055905183815292935090917ff9b842c70d79466435b46540bb988aa5c998b3243bf91c36380ddb5887c0f0e49101611250565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611133908590611f44565b611afc8282612016565b600754611b09908261198f565b6007556006546000906116cc90611b24906108bf9085611936565b6001600160a01b03851660009081526008602052604090205490611ce7565b6001600160a01b038316611ba75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610920565b6001600160a01b038216611c095760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610920565b6001600160a01b03831660009081526020819052604090205481811015611c815760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610920565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611133565b60006114408284612523565b6000816001600160a01b031663c31245256040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c6919061254a565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190612567565b6001600160a01b038216611e665760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610920565b6001600160a01b03821660009081526020819052604090205481811015611eda5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610920565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6000611440828461248a565b6000611f99826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120d59092919063ffffffff16565b805190915015610f6a5780806020019051810190611fb791906124bf565b610f6a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610920565b6001600160a01b03821661206c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610920565b806002600082825461207e9190612477565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60606120e484846000856120ec565b949350505050565b60608247101561214d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610920565b600080866001600160a01b031685876040516121699190612580565b60006040518083038185875af1925050503d80600081146121a6576040519150601f19603f3d011682016040523d82523d6000602084013e6121ab565b606091505b50915091506121bc878383876121c7565b979650505050505050565b6060831561223657825160000361222f576001600160a01b0385163b61222f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610920565b50816120e4565b6120e4838381511561224b5781518083602001fd5b8060405162461bcd60e51b815260040161092091906122bb565b6001600160a01b038116811461077c57600080fd5b60006020828403121561228c57600080fd5b813561144081612265565b60005b838110156122b257818101518382015260200161229a565b50506000910152565b60208152600082518060208401526122da816040850160208701612297565b601f01601f19169190910160400192915050565b6000806040838503121561230157600080fd5b823561230c81612265565b946020939093013593505050565b60008060006060848603121561232f57600080fd5b833561233a81612265565b9250602084013561234a81612265565b929592945050506040919091013590565b60006020828403121561236d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106123ac57634e487b7160e01b600052602160045260246000fd5b91905290565b801515811461077c57600080fd5b600080604083850312156123d357600080fd5b82356123de81612265565b915060208301356123ee816123b2565b809150509250929050565b6000806040838503121561240c57600080fd5b823561241781612265565b915060208301356123ee81612265565b600181811c9082168061243b57607f821691505b60208210810361245b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106c6576106c6612461565b6000826124a757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156106c6576106c6612461565b6000602082840312156124d157600080fd5b8151611440816123b2565b60008160001904831182151516156124f6576124f6612461565b500290565b808201828112600083128015821682158216171561251b5761251b612461565b505092915050565b818103600083128015838313168383128216171561254357612543612461565b5092915050565b60006020828403121561255c57600080fd5b815161144081612265565b60006020828403121561257957600080fd5b5051919050565b60008251612592818460208701612297565b919091019291505056fea2646970667358221220c0d2750c3c76375e5906431fad76d1ca1d3914e79b4aac15985463ad34115baa64736f6c63430008100033a26469706673582212200d98ace6e53f73a508869c4af4b93dbe0e7c9c6b5e3c90252f9ca38d92a2bccd64736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5011,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "globals",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IHeliosGlobals)3779"
      },
      {
        "astId": 5015,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5019,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5023,
        "contract": "contracts/pool/PoolFactory.sol:PoolFactory",
        "label": "poolFactoryAdmins",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHeliosGlobals)3779": {
        "encoding": "inplace",
        "label": "contract IHeliosGlobals",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}